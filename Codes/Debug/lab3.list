
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001fc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000390  08000398  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000390  08000390  00010398  2**0
                  CONTENTS
  4 .ARM          00000000  08000390  08000390  00010398  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000390  08000398  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000390  08000390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000394  08000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000398  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000398  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009d8  00000000  00000000  000103c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000024f  00000000  00000000  00010da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00010ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00011060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd5f  00000000  00000000  000110a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a50  00000000  00000000  0001ee07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fb22  00000000  00000000  0001f857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006f379  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b0  00000000  00000000  0006f3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000378 	.word	0x08000378

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000378 	.word	0x08000378

080001d4 <main>:
#include "stm32f401cc_interface.h"

int main(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	b087      	sub	sp, #28
 80001d8:	af00      	add	r7, sp, #0
	// Enabling GPIOB
	RCC_AHB1ENR |= (0x01 << 1);
 80001da:	4b35      	ldr	r3, [pc, #212]	; (80002b0 <main+0xdc>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	4a34      	ldr	r2, [pc, #208]	; (80002b0 <main+0xdc>)
 80001e0:	f043 0302 	orr.w	r3, r3, #2
 80001e4:	6313      	str	r3, [r2, #48]	; 0x30

	// setting pin3 as input for the push button
	GPIOB_MODER &= ~(0x03 << 6);
 80001e6:	4b33      	ldr	r3, [pc, #204]	; (80002b4 <main+0xe0>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a32      	ldr	r2, [pc, #200]	; (80002b4 <main+0xe0>)
 80001ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001f0:	6013      	str	r3, [r2, #0]

	// internal pull-up resistor enabled
	GPIOB_PUPDR &= ~(0x01 << 6);
 80001f2:	4b30      	ldr	r3, [pc, #192]	; (80002b4 <main+0xe0>)
 80001f4:	68db      	ldr	r3, [r3, #12]
 80001f6:	4a2f      	ldr	r2, [pc, #188]	; (80002b4 <main+0xe0>)
 80001f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80001fc:	60d3      	str	r3, [r2, #12]
	GPIOB_PUPDR |= (0x01 << 6);
 80001fe:	4b2d      	ldr	r3, [pc, #180]	; (80002b4 <main+0xe0>)
 8000200:	68db      	ldr	r3, [r3, #12]
 8000202:	4a2c      	ldr	r2, [pc, #176]	; (80002b4 <main+0xe0>)
 8000204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000208:	60d3      	str	r3, [r2, #12]

	// setting pins 5,6,7 as output
	// 0001 0101 >> 0x15
	GPIOB_MODER &= ~(0x15 << 10);
 800020a:	4b2a      	ldr	r3, [pc, #168]	; (80002b4 <main+0xe0>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a29      	ldr	r2, [pc, #164]	; (80002b4 <main+0xe0>)
 8000210:	f423 43a8 	bic.w	r3, r3, #21504	; 0x5400
 8000214:	6013      	str	r3, [r2, #0]
	GPIOB_MODER |= (0x15 << 10);
 8000216:	4b27      	ldr	r3, [pc, #156]	; (80002b4 <main+0xe0>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a26      	ldr	r2, [pc, #152]	; (80002b4 <main+0xe0>)
 800021c:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 8000220:	6013      	str	r3, [r2, #0]

	// type of 3 output pins as push-pull
	GPIOB_OTYPER &= ~(0x07 << 5);
 8000222:	4b24      	ldr	r3, [pc, #144]	; (80002b4 <main+0xe0>)
 8000224:	685b      	ldr	r3, [r3, #4]
 8000226:	4a23      	ldr	r2, [pc, #140]	; (80002b4 <main+0xe0>)
 8000228:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800022c:	6053      	str	r3, [r2, #4]


	unsigned char color = 0x00;
 800022e:	2300      	movs	r3, #0
 8000230:	75fb      	strb	r3, [r7, #23]



	while(1)
	{
		unsigned int reading1 = GPIOB_IDR & 0x08;
 8000232:	4b20      	ldr	r3, [pc, #128]	; (80002b4 <main+0xe0>)
 8000234:	691b      	ldr	r3, [r3, #16]
 8000236:	f003 0308 	and.w	r3, r3, #8
 800023a:	60bb      	str	r3, [r7, #8]

		// approximatly  1 ms before 2nd reading for debouncing
		for(unsigned int i = 0; i < 1000; i++)
 800023c:	2300      	movs	r3, #0
 800023e:	613b      	str	r3, [r7, #16]
 8000240:	e002      	b.n	8000248 <main+0x74>
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	3301      	adds	r3, #1
 8000246:	613b      	str	r3, [r7, #16]
 8000248:	693b      	ldr	r3, [r7, #16]
 800024a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800024e:	d3f8      	bcc.n	8000242 <main+0x6e>
		{}

		unsigned char reading2 = GPIOB_IDR & 0x08;
 8000250:	4b18      	ldr	r3, [pc, #96]	; (80002b4 <main+0xe0>)
 8000252:	691b      	ldr	r3, [r3, #16]
 8000254:	b2db      	uxtb	r3, r3
 8000256:	f003 0308 	and.w	r3, r3, #8
 800025a:	71fb      	strb	r3, [r7, #7]

		// Falling edge -> reading1 is 1 (not pushed) and reading2 is 0 (pushed)
		if(reading1 && reading2 != reading1)
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0e7      	beq.n	8000232 <main+0x5e>
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	68ba      	ldr	r2, [r7, #8]
 8000266:	429a      	cmp	r2, r3
 8000268:	d0e3      	beq.n	8000232 <main+0x5e>
		{
			color += 0x01;
 800026a:	7dfb      	ldrb	r3, [r7, #23]
 800026c:	3301      	adds	r3, #1
 800026e:	75fb      	strb	r3, [r7, #23]
			if (color == 0x08)
 8000270:	7dfb      	ldrb	r3, [r7, #23]
 8000272:	2b08      	cmp	r3, #8
 8000274:	d101      	bne.n	800027a <main+0xa6>
			{
				color = 0x00;
 8000276:	2300      	movs	r3, #0
 8000278:	75fb      	strb	r3, [r7, #23]
			}
			GPIOB_ODR &= ~(0x07 << 5); //clear the 3 pins 5,6,7
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <main+0xe0>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <main+0xe0>)
 8000280:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000284:	6153      	str	r3, [r2, #20]
			GPIOB_ODR |= (color << 5); //set color
 8000286:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <main+0xe0>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	7dfa      	ldrb	r2, [r7, #23]
 800028c:	0152      	lsls	r2, r2, #5
 800028e:	4611      	mov	r1, r2
 8000290:	4a08      	ldr	r2, [pc, #32]	; (80002b4 <main+0xe0>)
 8000292:	430b      	orrs	r3, r1
 8000294:	6153      	str	r3, [r2, #20]

			for(unsigned int i = 0; i < 10000; i++)
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
 800029a:	e002      	b.n	80002a2 <main+0xce>
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	3301      	adds	r3, #1
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	f242 720f 	movw	r2, #9999	; 0x270f
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d9f7      	bls.n	800029c <main+0xc8>
	{
 80002ac:	e7c1      	b.n	8000232 <main+0x5e>
 80002ae:	bf00      	nop
 80002b0:	40023800 	.word	0x40023800
 80002b4:	40020400 	.word	0x40020400

080002b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <SystemInit+0x20>)
 80002be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002c2:	4a05      	ldr	r2, [pc, #20]	; (80002d8 <SystemInit+0x20>)
 80002c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000314 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002e2:	490e      	ldr	r1, [pc, #56]	; (800031c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002e4:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0b      	ldr	r2, [pc, #44]	; (8000324 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80002f8:	4c0b      	ldr	r4, [pc, #44]	; (8000328 <LoopFillZerobss+0x26>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000306:	f7ff ffd7 	bl	80002b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800030a:	f000 f811 	bl	8000330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800030e:	f7ff ff61 	bl	80001d4 <main>
  bx  lr    
 8000312:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000314:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000320:	08000398 	.word	0x08000398
  ldr r2, =_sbss
 8000324:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000328:	2000001c 	.word	0x2000001c

0800032c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC_IRQHandler>
	...

08000330 <__libc_init_array>:
 8000330:	b570      	push	{r4, r5, r6, lr}
 8000332:	4d0d      	ldr	r5, [pc, #52]	; (8000368 <__libc_init_array+0x38>)
 8000334:	4c0d      	ldr	r4, [pc, #52]	; (800036c <__libc_init_array+0x3c>)
 8000336:	1b64      	subs	r4, r4, r5
 8000338:	10a4      	asrs	r4, r4, #2
 800033a:	2600      	movs	r6, #0
 800033c:	42a6      	cmp	r6, r4
 800033e:	d109      	bne.n	8000354 <__libc_init_array+0x24>
 8000340:	4d0b      	ldr	r5, [pc, #44]	; (8000370 <__libc_init_array+0x40>)
 8000342:	4c0c      	ldr	r4, [pc, #48]	; (8000374 <__libc_init_array+0x44>)
 8000344:	f000 f818 	bl	8000378 <_init>
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	10a4      	asrs	r4, r4, #2
 800034c:	2600      	movs	r6, #0
 800034e:	42a6      	cmp	r6, r4
 8000350:	d105      	bne.n	800035e <__libc_init_array+0x2e>
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f855 3b04 	ldr.w	r3, [r5], #4
 8000358:	4798      	blx	r3
 800035a:	3601      	adds	r6, #1
 800035c:	e7ee      	b.n	800033c <__libc_init_array+0xc>
 800035e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000362:	4798      	blx	r3
 8000364:	3601      	adds	r6, #1
 8000366:	e7f2      	b.n	800034e <__libc_init_array+0x1e>
 8000368:	08000390 	.word	0x08000390
 800036c:	08000390 	.word	0x08000390
 8000370:	08000390 	.word	0x08000390
 8000374:	08000394 	.word	0x08000394

08000378 <_init>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr

08000384 <_fini>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr
